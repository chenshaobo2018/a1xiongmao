<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- zjc_goods_collect[zjc_goods_collect]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-07-05 16:53:15 -->
<mapper namespace="com.api.goods.dao.ZjcGoodsCollectDao">
	
	 <resultMap id="queryForListMap" type="com.api.goods.dao.po.ZjcGoodsCollectPO"> 
        <id column="collect_id" property="collect_id" jdbcType="INTEGER" />
        <result column="user_id" property="user_id" jdbcType="INTEGER"/>
        <result column="goods_id" property="goods_id" jdbcType="INTEGER"/>
        <result column="add_time" property="add_time" jdbcType="VARCHAR"/>
        <collection property="zjcGoodsPO"  ofType="com.zjc.goods.dao.po.ZjcGoodsPO">  
	        <id column="goods_id" property="goods_id" jdbcType="VARCHAR"/>  
	        <result column="cat_id" property="cat_id" jdbcType="VARCHAR"/>
	        <result column="extend_cat_id" property="extend_cat_id" jdbcType="VARCHAR"/>
	        <result column="goods_sn" property="goods_sn" jdbcType="VARCHAR"/>
	        <result column="goods_name" property="goods_name" jdbcType="VARCHAR"/>
	        <result column="store_id" property="store_id" jdbcType="VARCHAR"/>
	        <result column="click_count" property="click_count" jdbcType="VARCHAR"/>
	        <result column="brand_id" property="brand_id" jdbcType="VARCHAR"/>
	        <result column="store_count" property="store_count" jdbcType="VARCHAR"/>
	        <result column="comment_count" property="comment_count" jdbcType="VARCHAR"/>
	        <result column="weight" property="weight" jdbcType="VARCHAR"/>
	        <result column="market_price" property="market_price" jdbcType="VARCHAR"/>
	        <result column="shop_price" property="shop_price" jdbcType="VARCHAR"/>
	        <result column="cost_price" property="cost_price" jdbcType="VARCHAR"/>
	        <result column="keywords" property="keywords" jdbcType="VARCHAR"/>
	        <result column="goods_remark" property="goods_remark" jdbcType="VARCHAR"/>
	        <result column="goods_content" property="goods_content" jdbcType="VARCHAR"/>
	        <result column="original_img" property="original_img" jdbcType="VARCHAR"/>
	        <result column="is_real" property="is_real" jdbcType="VARCHAR"/>
	        <result column="is_on_sale" property="is_on_sale" jdbcType="VARCHAR"/>
	        <result column="is_free_shipping" property="is_free_shipping" jdbcType="VARCHAR"/>
	        <result column="on_time" property="on_time" jdbcType="VARCHAR"/>
	        <result column="sort" property="sort" jdbcType="VARCHAR"/>
	        <result column="is_recommend" property="is_recommend" jdbcType="VARCHAR"/>
	        <result column="is_hot" property="is_hot" jdbcType="VARCHAR"/>
	        <result column="is_new" property="is_new" jdbcType="VARCHAR"/>
	        <result column="last_update" property="last_update" jdbcType="VARCHAR"/>
	        <result column="goods_type" property="goods_type" jdbcType="VARCHAR"/>
	        <result column="spec_type" property="spec_type" jdbcType="VARCHAR"/>
	        <result column="give_integral" property="give_integral" jdbcType="VARCHAR"/>
	        <result column="exchange_integral" property="exchange_integral" jdbcType="VARCHAR"/>
	        <result column="suppliers_id" property="suppliers_id" jdbcType="VARCHAR"/>
	        <result column="sales_sum" property="sales_sum" jdbcType="VARCHAR"/>
	        <result column="prom_type" property="prom_type" jdbcType="VARCHAR"/>
	        <result column="prom_id" property="prom_id" jdbcType="VARCHAR"/>
	        <result column="commission" property="commission" jdbcType="VARCHAR"/>
	        <result column="spu" property="spu" jdbcType="VARCHAR"/>
	        <result column="sku" property="sku" jdbcType="VARCHAR"/>
	        <result column="shipping_area_ids" property="shipping_area_ids" jdbcType="VARCHAR"/>
	        <result column="goods_state_1" property="goods_state_1" jdbcType="VARCHAR"/>
	        <result column="goods_state_2" property="goods_state_2" jdbcType="VARCHAR"/>
	        <result column="commission_rate_1" property="commission_rate_1" jdbcType="VARCHAR"/>
	        <result column="commission_rate_2" property="commission_rate_2" jdbcType="VARCHAR"/>
	        <result column="commission_rate_3" property="commission_rate_3" jdbcType="VARCHAR"/>
	        <result column="wallet_amplification_rate" property="wallet_amplification_rate" jdbcType="VARCHAR"/>
	        <result column="store_rebate_rate" property="store_rebate_rate" jdbcType="VARCHAR"/>
	        <result column="aduit_info" property="aduit_info" jdbcType="VARCHAR"/>
	        <result column="admin_aduit_info" property="admin_aduit_info" jdbcType="VARCHAR"/>
	        <result column="market_price_bs" property="market_price_bs" jdbcType="VARCHAR"/>
	        <result column="shop_price_bs" property="shop_price_bs" jdbcType="VARCHAR"/>
	        <result column="prompt_goods" property="prompt_goods" jdbcType="VARCHAR"/>
        </collection>  
    </resultMap>
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="collect_id" parameterType="ZjcGoodsCollectPO">
		INSERT INTO zjc_goods_collect (
		<if test="user_id != null">
	         user_id, <!-- 用户id -->
		</if>
		<if test="goods_id != null">
	         goods_id, <!-- 商品id -->
		</if>
		<if test="add_time != null">
	         add_time, <!-- 添加时间 -->
		</if>
	          collect_id
		)VALUES(
		<if test="user_id != null">
	          #{user_id, jdbcType=INTEGER}, <!-- 用户id -->
	    </if>
		<if test="goods_id != null">
	          #{goods_id, jdbcType=INTEGER}, <!-- 商品id -->
	    </if>
		<if test="add_time != null">
	          #{add_time, jdbcType=VARCHAR}, <!-- 添加时间 -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="collect_id" parameterType="ZjcGoodsCollectPO">
		INSERT INTO zjc_goods_collect (
		    <include refid="column" />
		)
		VALUES (
		    #{collect_id, jdbcType=INTEGER},  <!-- 表id -->
		    #{user_id, jdbcType=INTEGER},  <!-- 用户id -->
		    #{goods_id, jdbcType=INTEGER},  <!-- 商品id -->
		    #{add_time, jdbcType=VARCHAR}  <!-- 添加时间 -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="ZjcGoodsCollectPO">
		UPDATE zjc_goods_collect
		<set>
			<if test="collect_id != null">
		          collect_id = #{collect_id, jdbcType=INTEGER},  <!-- 表id -->
			</if>
			<if test="user_id != null">
		          user_id = #{user_id, jdbcType=INTEGER},  <!-- 用户id -->
			</if>
			<if test="goods_id != null">
		          goods_id = #{goods_id, jdbcType=INTEGER},  <!-- 商品id -->
			</if>
			<if test="add_time != null">
		          add_time = #{add_time, jdbcType=VARCHAR},  <!-- 添加时间 -->
			</if>
		</set>
		WHERE  collect_id = #{collect_id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM zjc_goods_collect WHERE  collect_id = #{collect_id}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="ZjcGoodsCollectPO">
		SELECT
		<include refid="column" />
		FROM zjc_goods_collect WHERE  collect_id = #{collect_id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="ZjcGoodsCollectPO">
		SELECT
		    <include refid="column" />
		FROM zjc_goods_collect
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="ZjcGoodsCollectPO">
		SELECT
			<include refid="column" />	
		FROM zjc_goods_collect
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="ZjcGoodsCollectPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM zjc_goods_collect
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="ZjcGoodsCollectPO">
		SELECT
			<include refid="column" />	
		FROM zjc_goods_collect
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="ZjcGoodsCollectPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM zjc_goods_collect
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM zjc_goods_collect
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM zjc_goods_collect
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  collect_id,  <!-- 表id -->
		  user_id,  <!-- 用户id -->
		  goods_id,  <!-- 商品id -->
		  add_time  <!-- 添加时间 -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  zjc_goods_collect.collect_id,  <!-- 表id -->
		  zjc_goods_collect.user_id,  <!-- 用户id -->
		  zjc_goods_collect.goods_id,  <!-- 商品id -->
		  zjc_goods_collect.add_time  <!-- 添加时间 -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="collect_id != null ">
		      AND collect_id = #{collect_id}  <!-- 表id -->
		</if>
	   <if test="user_id != null ">
		      AND user_id = #{user_id}  <!-- 用户id -->
		</if>
	   <if test="goods_id != null ">
		      AND goods_id = #{goods_id}  <!-- 商品id -->
		</if>
	   <if test="add_time != null ">
		      AND add_time = #{add_time}  <!-- 添加时间 -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	</sql>
	
	<!-- =======================================================app接口==================================================== -->
	<!-- 根据Dto查询并返回我的收藏商品对象集合 -->
	<select id="listMyCollectGoodsPage" resultMap="queryForListMap" parameterType="Dto" useCache="false">
		SELECT
			t.collect_id,t.user_id,t.goods_id,t.add_time,t1.original_img,t1.goods_name,t1.shop_price,t1.market_price
			,t1.prompt_goods 
		FROM zjc_goods_collect t left join zjc_goods t1 on t.goods_id = t1.goods_id
		<where>
		   <if test="user_id != null ">
		      AND t.user_id = #{user_id}  <!-- 用户id -->
		</if>
		</where>
		order by t.collect_id desc	
	</select>
</mapper>