<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- t_cart[t_cart]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2019-03-05 10:01:09 -->
<mapper namespace="com.api.hl.dao.TCartDao">
		<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="TCartPO">
		INSERT INTO t_cart (
		<if test="user_id != null and user_id != ''">
	         user_id, <!-- user_id -->
		</if>
		<if test="goods_id != null and goods_id != ''">
	         goods_id, <!-- goods_id -->
		</if>
		<if test="num != null and num != ''">
	         num, <!-- num -->
		</if>
		<if test="type_id != null and type_id != ''">
	         type_id, <!-- goods_id -->
		</if>
	          id
		)VALUES(
		<if test="user_id != null and user_id != ''">
	          #{user_id, jdbcType=VARCHAR}, <!-- user_id -->
	    </if>
		<if test="goods_id != null and goods_id != ''">
	          #{goods_id, jdbcType=VARCHAR}, <!-- goods_id -->
	    </if>
		<if test="num != null and num != ''">
	          #{num, jdbcType=VARCHAR}, <!-- num -->
	    </if>
	    <if test="type_id != null and type_id != ''">
	        #{type_id, jdbcType=VARCHAR},
		</if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id" parameterType="TCartPO">
		INSERT INTO t_cart (
		    <include refid="column" />
		)
		VALUES (
		    #{id, jdbcType=INTEGER},  <!-- id -->
		    #{user_id, jdbcType=VARCHAR},  <!-- user_id -->
		    #{goods_id, jdbcType=VARCHAR},  <!-- goods_id -->
		    #{num, jdbcType=VARCHAR},  <!-- num -->
		    #{type_id, jdbcType=VARCHAR}
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="TCartPO">
		UPDATE t_cart
		<set>
			<if test="id != null">
		          id = #{id, jdbcType=INTEGER},  <!-- id -->
			</if>
			<if test="user_id != null">
		          user_id = #{user_id, jdbcType=VARCHAR},  <!-- user_id -->
			</if>
			<if test="goods_id != null">
		          goods_id = #{goods_id, jdbcType=VARCHAR},  <!-- goods_id -->
			</if>
			<if test="num != null">
		          num = #{num, jdbcType=VARCHAR},  <!-- num -->
			</if>
			<if test="type_id != null">
		          type_id = #{type_id, jdbcType=VARCHAR},  <!-- num -->
			</if>
		</set>
		WHERE  id = #{id}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM t_cart WHERE  id = #{id}
	</delete>
	
	<select id="deleteCart" resultType="TCartPO">
		DELETE FROM t_cart WHERE  user_id=#{user_id} and num=#{num} and goods_id=#{goods_id}
	</select>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="TCartPO">
		SELECT
		<include refid="column" />
		FROM t_cart WHERE  id = #{id}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="TCartPO">
		SELECT
		    <include refid="column" />
		FROM t_cart
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="TCartPO">
		SELECT
			<include refid="column" />	
		FROM t_cart
		<where>
		    <include refid="equal" />
		</where>
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="TCartPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM t_cart
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="TCartPO">
		SELECT
			<include refid="column" />	
		FROM t_cart
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="TCartPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FROM t_cart
		<where>
		    <include refid="like" />
		</where>	
		
		
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM t_cart
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM t_cart
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id,  <!-- id -->
		  user_id,  <!-- user_id -->
		  goods_id,  <!-- goods_id -->
		  num,  <!-- num -->
		  type_id
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  t_cart.id,  <!-- id -->
		  t_cart.user_id,  <!-- user_id -->
		  t_cart.goods_id,  <!-- goods_id -->
		  t_cart.num,  <!-- num -->
		  t_cart.type_id
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id != null ">
		      AND id = #{id}  <!-- id -->
		</if>
	    <if test="user_id != null and user_id != ''">
		      AND user_id = #{user_id}  <!-- user_id -->
		</if>
	    <if test="goods_id != null and goods_id != ''">
		      AND goods_id = #{goods_id}  <!-- goods_id -->
		</if>
	    <if test="num != null and num != ''">
		      AND num = #{num}  <!-- num -->
		</if>
		 <if test="type_id != null and type_id != ''">
		      AND type_id = #{type_id}  <!-- num -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="user_id != null and user_id != ''">
		      AND user_id like '%${user_id}%'  <!-- user_id -->
		</if>
	    <if test="goods_id != null and goods_id != ''">
		      AND goods_id like '%${goods_id}%'  <!-- goods_id -->
		</if>
	    <if test="num != null and num != ''">
		      AND num like '%${num}%'  <!-- num -->
		</if>
	</sql>
	
</mapper>